@page "/"
@inject HttpClient Http
@using CsvHelper
@using System.IO
@using System.Linq
@using System.Globalization

<h1>Akkadict</h1>
<h3><i>Bringing a 3000 BC language to 3000 AD.</i></h3>

@if (words.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="alert alert-warning" role="alert">
        <span class="oi oi-bug"></span> &lt; &nbsp; 
Declensions not guaranteed to be correct. <b>Tons</b> of phonological rules are missing.
    </div>
<p>Filter: <input type="text" bind="@FilterQuery" oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" /> </p>

<table class="table">
    <thead>
        <tr>
            <th>Word</th>
            <th>Declension</th>
            <th>Meaning</th>
            <th>PoS</th>
            <th>Gender</th>
            <th>Chapter</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var word in words.Where(FilterPred))
        {
        <tr>
            <td>@word.Headword</td>
            <td>
                <DeclensionBox word="@word"/>
            </td>
            <td>@word.Meaning</td>
            <td>@word.PoS</td>
            <td>@word.NounGender</td>
            <td>@word.Chapter</td>
        </tr>
        }
    </tbody>
</table>
}

@functions {
    List<Word> words = new List<Word>();
    string FilterQuery = "";


    bool FilterPred(Word w) {
        // TODO: have list of searchable strings
        foreach (string _haystack in w.Decline().Select(p=>p.Item2).Concat(new [] { w.Meaning,   }))
        {
            string haystack = _haystack;
            var normquery = Word.Norm(FilterQuery);
            // only ascii chars in search => match ascii chars in fields
            if (!normquery.Any(c => CharUnicodeInfo.GetUnicodeCategory(c) == UnicodeCategory.NonSpacingMark))
            {
                haystack = Word.ASCIIfy(haystack.ToLower());
               
            }

            if (haystack.Contains(normquery))
                return true;
        }
        return false;
    }
    protected override async Task OnInitAsync()
    {
        words = new List<Word>();
        var cvsdata = await Http.GetStringAsync("https://docs.google.com/spreadsheets/d/1zrWkaay9bhqr_c2gZm9MLQ_j2dMVtM5ZZvQJlpq4jlQ/export?format=csv&id=1zrWkaay9bhqr_c2gZm9MLQ_j2dMVtM5ZZvQJlpq4jlQ&gid=0");
        using (var reader = new StringReader(cvsdata)) {
            using (var csv = new CsvReader(reader))
            {
                words = csv.GetRecords<Word>().ToList();
                foreach (var word in words) {
                    Console.WriteLine(word.Headword);
                }
            }
        }
    }
}
